#+TITLE: Emacs MMXXII
#+AUTHOR: Vicente Collares

This is my new Emacs configuration for the year 2022 after having suffered “dot
emacs bankruptcy.” Initially it was supposed to be for document preparation
exclusively, but grew into a general text editing environment.

* Packet managers and repository
** Straight.el
Next-generation, purely functional package manager for the Emacs hacker.
/See: [[https://github.com/raxod502/straight.el][straight.el (GitHub)]]/

#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t)

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC
* Personal preferences
** My variables
My variables as set-up by Emacs, with minor modifications on my part.

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8) ; Always try to use utf-8

  (custom-set-variables
   '(custom-enabled-themes '(tango-dark))
   '(org-startup-folded t)
   '(inhibit-startup-screen t)
   '(safe-local-variable-values
     '((vc-prepare-patches-separately)
       (diff-add-log-use-relative-names . t)
       (vc-git-annotate-switches . "-w")
       (TeX-engine . LuaTeX)))
   '(warning-suppress-types '((comp)))
   '(column-number-mode t)
   '(read-quoted-char-radix 16)
   '(history-delete-duplicates t)
   '(find-function-C-source-directory
     (concat (getenv "HOME") "/Downloads/src/emacs/src")))

  (add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp"))
  ;; Avoid unnecessary warnings
  (setq warning-minimum-level :emergency)
#+END_SRC
** No Backup Or Autosave
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) 
(setq auto-save-default nil)
#+END_SRC
** Line Numbering
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC
** Hide toolbar and scrollbar when using emacs from GUI
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1))
#+END_SRC
** Always open emacs GUI maximized
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** Confirm before exiting Emacs
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
** Close current buffer
Close the current buffer using "kill-buffer-and-window" by pressing "C-x k" (globally). 

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-x k") 'kill-buffer-and-window) 
    
#+END_SRC
** Disable suspend Emacs keybindings when using emacs from GUI
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (global-set-key (kbd "C-x C-z") nil)
    (global-set-key (kbd "C-z") nil))
#+END_SRC
** Keeping track of recently opened files
#+BEGIN_SRC emacs-lisp
  ;; Start recentf globally at startup
  (recentf-mode t)

  ;; What not to include in the list of recently opened files
  (setq recentf-exclude `(,(expand-file-name "~/quicklisp/*") "/usr/include/*"
			  "/usr/share/sbcl-source/*" "/tmp/*" "/usr/share/emacs/*"))
#+END_SRC
** Change font to "Hack" when using emacs from GUI
Change emacs font to "Hack" and set font size to 10pt.

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (set-face-attribute 'default nil :family "Hack" :height 100))
#+END_SRC
** Fill-column value and indicator
Here the fill-column is set at 80 and a built-in minor mode that shows the fill
column length of the buffer is enabled.

#+begin_src emacs-lisp
  (setq-default fill-column 80)

  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (global-set-key (kbd "C-c f") #'display-fill-column-indicator-mode)
#+end_src
* Packages
** Restart Emacs from within itself
Restart Emacs from within Emacs itself using the keybinding "C-x c" (which resembles to "C-x C-c").
/See: [[https://github.com/iqbalansari/restart-emacs][Restart-Emacs (GitHub)]]/

#+begin_src emacs-lisp
  (use-package restart-emacs
    :straight t
    :bind* (
	    ("C-x c" . #'restart-emacs)
	    )
    )
#+end_src
** Better undoing and redoing using Undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :init
    (global-undo-tree-mode)
    :bind* (("C--" . undo-tree-undo)
	    ("C-=" . undo-tree-redo)
	    ;; Useful when running in a terminal to avoid conflict
	    ("C-c -" . undo-tree-undo)
	    ("C-c =" . undo-tree-redo))
    :config
    (setq undo-tree-auto-save-history nil))
#+end_src
** Move the current line
Move-text allows you to move the current line/region using "M-up" and "M-down" outside Org-mode.

#+begin_src emacs-lisp
  (use-package move-text
      :straight t
      :config
      (move-text-default-bindings)
  )
#+end_src

** which-key
which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.
/See: [[https://github.com/justbur/emacs-which-key][Which-key (GitHub)]]/

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :config
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    )
#+END_SRC

** Magit (Git porcelain)
Magit is an interface to Git implemented as an Emacs package. It aspires to be a complete Git porcelain.
/See: [[https://github.com/magit/magit][Magit (GitHub)]]/

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind* ("C-x g" . magit-status))
#+end_src

** Company-mode (Autocomplete)
Default Configuration for company-mode from their site.
/Source: [[https://company-mode.github.io/][company-mode for Emacs]]/

#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :config
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** Automatic insertion of pairs
Smartparens is for the automatic insertion, wrapping navigation with user defined pairs.
/See: [[https://github.com/Fuco1/smartparens][Smartparens (GitHub)]]/

#+begin_src emacs-lisp
  (use-package smartparens
    :straight t
    :hook ((prog-mode haskell-interactive-mode LaTeX-mode lisp-interaction-mode yaml-mode) . smartparens-mode)
    :config
    (require 'smartparens-config))
#+end_src
** On the fly syntax checking
Flycheck provides modern on-the-fly syntax checking extension for multiple languages for Emacs.
/See: [[https://github.com/flycheck/flycheck][flycheck (GitHub)]]/

#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :init (global-flycheck-mode))
#+end_src
** Rainbow delimiters
This mode highlights delimiters such as parentheses, brackets or braces according to their depth. Each depth has it own color.
/See: [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters (GitHub)]]/

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
** Language Server Protocol (LSP)
The Language Server Protocol is protocol for use between editors/IDEs and servers that provide programming language-specific features.

*** LSP client (Eglot)
Emacs now includes a LSP client called Eglot. Here I alias it to something easy to remember and add a global key binding for it.
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :straight
    (:type built-in)
    :bind* (("C-c l" . eglot)))

  (defalias 'lsp 'eglot)
#+END_SRC
** Helm: incremental completions and narrowing selections
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :straight t
    :bind (
	   ("M-x" . helm-M-x)
	   ("C-x C-f" . helm-find-files)
	   ("C-x b" . helm-buffers-list)
	   ("C-c r" . helm-recentf))
    :custom
    (helm-move-to-line-cycle-in-source nil)
    :config
    (helm-mode 1))
#+END_SRC
** An improved help buffer
The package "helpful" is an alternative to the built-in Emacs help that provides much more contextual information.

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :straight t
    :bind (
	   ("C-h f" . helpful-callable)
	   ("C-h v" . helpful-variable)
	   ("C-h k" . helpful-key)
	   ("C-h =" . helpful-at-point)))
#+END_SRC
* Typesetting things
** AUCTeX
This tells Emacs to require AUCTeX. AUCTeX is an extensible package for writing and formatting TeX files in Emacs.
/See: [[https://en.wikipedia.org/wiki/AUCTeX][Wikipedia]]/

#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :straight t)
#+end_src
** Markdown
I also tell Emacs to require Markdown mode.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t)
#+end_src
** htmlize
I tell Emacs to require htmlize. This package is used when generating html pages from .org files.

#+begin_src emacs-lisp
  (use-package htmlize
    :straight t)
#+end_src

* Org-mode customization
** Org-mode itself
Here we tell Emacs to use the version of Org-mode that comes build-in to avoid version mismatch.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight
    (:type built-in))
  ;; (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1)))
#+END_SRC
** Org-mode bullets
Prettify headings and plain lists in Org mode.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :straight t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode)
    )
#+end_src

** Org-mode link to man pages
/See: [[https://orgmode.org/manual/Adding-Hyperlink-Types.html][Adding Hyperlink Types (The Org Manual)]]/

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org-mode
  (require 'ol-man))
#+end_src
** Preview LaTeX equations
*** Text size of equations when using org-latex-preview
#+BEGIN_SRC emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.6))
#+END_SRC
*** Location of the images of equations when using org-latex-preview
#+BEGIN_SRC emacs-lisp
  (setq org-preview-latex-image-directory
	(expand-file-name (concat user-emacs-directory "ltximg/")))
#+END_SRC
** Default LaTeX packages that should always be loaded
#+BEGIN_SRC emacs-lisp
  (setq org-latex-packages-alist '(("" "bbm" t)))
#+END_SRC
** Compiling LaTeX with LuaTeX
Use LuaTeX (through latexmk) instead of pdfTeX to compile Org-mode files.
/See: [[man:latexmk][Latexmk (man page)]]/

#+BEGIN_SRC emacs-lisp :tangle no
  (with-eval-after-load 'ox-latex
    (setq org-latex-pdf-process '("latexmk -f -pdf -lualatex -interaction=nonstopmode -output-directory=%o %f")))
#+end_src

* Misc
** Slime (Superior Lisp Interaction Mode)
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :straight t
    :config
    (setq inferior-lisp-program "sbcl"))
#+END_SRC

** Uxntal assembly language
#+BEGIN_SRC emacs-lisp
  (use-package uxntal-mode
    :straight t)
#+END_SRC

** A terminal emulator inside Emacs
Emacs-libvterm is fully-fledged terminal emulator inside GNU Emacs based on
libvterm, a C library. Change the color of black to a dark gray (#656565). Do
not kill the buffer when the shell is exited.

#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :straight t
    :custom-face
    (vterm-color-black ((t (:foreground "#656565" :background "#656565"))))
    :config
    (global-set-key (kbd "C-c t") 'vterm)
    (setq vterm-kill-buffer-on-exit nil)
    (setq vterm-timer-delay nil))
#+END_SRC

** Highlight certain keywords
To see a list of all keywords that this mode highlights: C-h v hl-todo-keyword-faces RET.

#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :straight t
    :hook (prog-mode text-mode)
    :bind (
	   :map hl-todo-mode-map
	   ("C-c p" . 'hl-todo-previous)
	   ("C-c n" . 'hl-todo-next)
	   ("C-c o" . 'hl-todo-occur)
	   ("C-c i" . 'hl-todo-insert)))
#+END_SRC
** Editing files YAML data files
I don't edit YAML files often, but when I do I'd like for my editor to support it.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode "\\.yml\\'")
#+END_SRC

** A function to reload this configuration
When ~re-eval-my-config~ is executed, the whole configuration is reloaded.

#+BEGIN_SRC emacs-lisp
  (defun re-eval-my-config ()
    "This interactive function re-evaluates your whole configuration."
    (interactive)
    (when (y-or-n-p "Do you want to reload your configuration?")
      (load-file user-init-file)))

  (global-set-key [f9] #'re-eval-my-config)
#+END_SRC

** Scheme
Geiser is a generic Emacs/Scheme interaction mode, it features a REPL and minor modes
which improve upon Emacs' scheme major-mode. ~geiser-guile~ is an independent package
which adds support for working with GNU Guile.
/See: [[https://www.nongnu.org/geiser/][Geiser User Manual]]/

#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :straight t)

  (use-package geiser-guile
    :straight t)
#+END_SRC

** The C# language
The package needed to edit C# program files is included with GNU Emacs 29 or later.
** Set the Emoji font
#+BEGIN_SRC emacs-lisp
  (setq use-default-font-for-symbols nil)

  (when (member "Noto Color Emoji" (font-family-list))
    (set-fontset-font
     t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
#+END_SRC

** Netwide Assembler (NASM)
This is a major mode for editing NASM x86 assembly programs. It understands
NASM-specific syntax. All files ending by ~.asm~ will now, by default, use
nasm-mode since that's the assembler I use the most.
/Repository: [[https://github.com/skeeto/nasm-mode][nasm-mode (GitHub)]]/

#+BEGIN_SRC emacs-lisp
  (use-package nasm-mode
    :straight t
    :config
    (add-to-list 'auto-mode-alist '("\\.asm\\'" . nasm-mode)))
#+END_SRC
